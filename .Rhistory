}
}
f.dist.xy<-function(x1,y1,x2,y2){
return(sum((x1-x2)^2+(y1-y2)^2)^0.5)
#    return(sum((p1-p2)^2)^0.5)
}
runApp('RRAPP1')
shiny::runApp('RRAPP1')
f.get.flavor<-function(usr_id,Kstar=.5){
usr.temp<-filter(UR.Flavor.test,user_id==usr_id)%>%
select(-user_id,-business_id)
usr.temp$categories<-gsub("'","",usr.temp$categories)
len<-dim(usr.temp)[1]
index=1
usr.flavor<-data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
)
for(index in 2:len){
usr.flavor<-rbind(usr.flavor,
data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
))
}
usr.flavor<-filter(usr.flavor,!grepl("Restaurants",flavor))
usr.flavor$diff<-as.numeric(max(usr.flavor$date)-usr.flavor$date)
usr.flavor$dateStar<-Kstar*(1/log(usr.flavor$diff+2.33))*exp(usr.flavor$stars)
result.flavor<-select(usr.flavor,flavor,dateStar)%>%
group_by(flavor)%>%
summarise(score=sum(dateStar))
# 数据标准化
result.flavor$score<-scale1(result.flavor$score,center=T,scale=T)
result.flavor$flavor<-as.character(result.flavor$flavor)
return(as.data.frame(result.flavor))
}
scale1<- function (x, center = TRUE, scale = TRUE)
{
x <- as.matrix(x)
nc <- ncol(x)
if (is.logical(center)) {
if (center) {
center <- colMeans(x, na.rm = TRUE)
x <- sweep(x, 2L, center, check.margin = FALSE)
}
}
else if (is.numeric(center) && (length(center) == nc))
x <- sweep(x, 2L, center, check.margin = FALSE)
else stop("length of 'center' must equal the number of columns of 'x'")
if (is.logical(scale)) {
if (scale) {
f <- function(v) {
v <- v[!is.na(v)]
sqrt(sum(v^2)/max(1, length(v) - 1L))
}
scale <- apply(x, 2L, f)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
}
}
else if (is.numeric(scale) && length(scale) == nc)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
else stop("length of 'scale' must equal the number of columns of 'x'")
#if (is.numeric(center))
#    attr(x, "scaled:center") <- center
#if (is.numeric(scale))
#    attr(x, "scaled:scale") <- scale
x
}
engine.random<-function(x,y,Radius=0.01,TopN=10,Flavour=NULL){
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
if(!is.null(Flavour)){
flavor.list<-vector()
for(flavor.ith in 1:length(Flavour$flavor)){
flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
}
B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
len=dim(B.inO)[1]
if(len<TopN)
return(B.inO$business_id)
else
return(sample_n(B.inO,TopN)$business_id)
}
engine.popular<-function(x,y,Radius=0.01,TopN=8,Flavour=NULL,Kstar=0.5,sigma=0.233){
# 得到范围内餐馆
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
# 加入用户对口味的偏好
if(!is.null(Flavour)){
for(flavor.ith in 1:length(Flavour$flavor)){
#      flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars =
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars+sigma*Flavour$score[flavor.ith]
}
#    B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
# 检验剩余餐馆是否小于topN，如小于直接输出所有结果
len=dim(B.inO)[1]
if(len<TopN){
return(B.inO$business_id)
}
else{
# 以餐馆进行分组，统计UR.Rst中每个餐馆的区域评分
UR.inO<-select(UR.Rst.2,-stars)%>%
filter(business_id %in% B.inO$business_id)%>%
left_join(select(B.inO,business_id,stars))%>%
mutate(diff=as.numeric(max(date)-date),newstars=exp(stars))%>%
mutate(logdiff=1/log(diff+2.33),dateStar=Kstar*logdiff*newstars)%>%
group_by(business_id)%>%
summarise(score=sum(dateStar))%>%
arrange(desc(score))
B.inO<-as.data.frame(UR.inO[1:TopN,])
return(B.inO)
}
}
f.dist.xy<-function(x1,y1,x2,y2){
return(sum((x1-x2)^2+(y1-y2)^2)^0.5)
#    return(sum((p1-p2)^2)^0.5)
}
runApp('RRAPP1')
library(dplyr)
library(data.table)
library(igraph)
library(dplyr)
library(data.table)
library(ggplot2)
library(RColorBrewer)
library(showtext)
font.families()
library(MASS)
library(MASS)
dirname(sys.frame(1)$ofile)
sys.frame(1)
script.dir <- dirname(sys.frame(1)$ofile)
data1<-read.csv("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE,sep=",")    #????训锟斤拷??????
View(data1)
library(MASS)
fit<-lm(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word+breview_count
+bstars+fans+ureview_count+average_stars,data=data_training)
data_training<-as.data.frame(fread("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE))    #????训锟斤拷??????
library(data.table)
data_training<-as.data.frame(fread("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE))    #????训锟斤拷??????
fit<-lm(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word+breview_count
+bstars+fans+ureview_count+average_stars,data=data_training)
fit<-lm(stars~polarity+subjectivity+log(letter)+word+votes_cool+votes_funny+votes_useful
+log(breview_count)+bstars+log(ureview_count)+average_stars+fans+gender,data=data_training)
fit<-lm(stars~polarity+subjectivity+word+votes_useful+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata)
data1<-as.data.frame(fread("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE))    #????训锟斤拷??????
attach(data1)
mydata<-data.frame(polarity,subjectivity,log_letter=log(data1$letter),word,votes_cool,votes_funny,votes_useful,log_breview_count=log(data1$breview_count),bstars,fans,log_ureview_count=log(data1$ureview_count),average_stars,gender,stars)
View(mydata)
detach(data1)
fit<-lm(stars~polarity+subjectivity+log_letter+word+votes_cool+votes_funny+votes_useful      #取?????????斜?锟斤拷
+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata)
summary.fit<-summary(fit)
write.csv(summary.fit$coefficients,"summary_fit1.csv",row.names=F)
fit<-lm(stars~polarity+subjectivity+word+votes_useful
+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata)
summary.fit<-summary(fit)
getwd()
library(MASS)
fit<-lm(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word+breview_count
+bstars+fans+ureview_count+average_stars,data=data_training)
library(leaps)
attach(data_training)
leaps<-regsubsets(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word
+breview_count+bstars+fans+ureview_count+average_stars,data=data_training,nbest=2)
leaps<-regsubsets(stars~polarity+subjectivity+log(letter)+word+votes_cool+votes_funny+votes_useful
+log(breview_count)+bstars+log(ureview_count)+average_stars+fans+gender,data=data_training,nbest=2)
leaps<-regsubsets(stars~polarity+subjectivity+letter+votes_cool
+breview_count+bstars+fans+ureview_count+average_stars+gender,data=data_training,nbest=2)
leaps<-regsubsets(stars~polarity+subjectivity+log(letter)+votes_cool
+log(breview_count)+bstars+log(ureview_count)+average_stars+fans+gender,data=data_training,nbest=2)
attach(mydata)
leaps<-regsubsets(stars~polarity+subjectivity+word+votes_useful+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata,nbest=2)
summary(leaps)
plot(leaps,scale="r2")
summary.regsubsets(leaps)
summary(leaps)
leaps.summary<-summary(leaps)
library(car)
qqPlot(fit,labels=row.names(data),id.method="identify",simulate=TRUE,
main="Q-Q图",xlab="标准化预测值",ylab="残差值")
library("gcookbook")
install.packages("gcookbook")
library("gcookbook")
residplot<-function(fit,nbreaks=100){
z<-rstudent(fit)
hist(z,breaks=nbreaks,freq=FALSE,
xlab="标准化残差",ylab="密度",
main="误差分布")
rug(jitter(z),col="brown")
curve(dnorm(x,mean=mean(z),sd=sd(z)),
add=TRUE,col="blue",lty=2)
lines(density(z)$x,density(z)$y,
col="red",lwd=2,lty=2)
legend("topright",legend=c("正态分布曲线","内核密度曲线"),
lty=1:2,col=c("blue","red"),cex=.7)
}
residplot(fit)
library(proxy)
summary(pr_DB)
?pch
load("E:/8sem/thesis/src/中期答辩这一波茫茫的数据.RData")
View(B.inO)
View(temp.popular)
View(temp.popular.flavor)
rm(temp.popular,temp.popular.flavor,temp.random,temp.random.flavor,recommendation)
View(Flavour)
View(UR.Flavor.test)
View(UR.Flavor.test)
length(unique(UR.Flavor.test$user_id))
rm(usr.result,usr.recommender,U.sample.list)
rm(res,res.IBCF,sample.ith,Kstar,sigma)
rm(TopN)
x <- seq(from = -5, to = 5, by = 0.05)
df <- data.frame(
x = x,
fun_a = sin(x^2),
fun_b = 50 * sin(x)
)
View(df)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
df2 <- df %>%
gather(key = fun, value = y, -x)
library(tidyverse)
df2 <- df %>%
gather(key = fun, value = y, -x)
View(df2)
df3 <- df %>%
rename(`sin~(x^2)` = fun_a, `'50'~sin~(x)` = fun_b) %>%
gather(key = fun, value = y, -x)
View(df3)
View(df2)
View(df3)
ggplot(df3, aes(x = x, y = y, color = fun)) +
geom_path() +
facet_grid(fun ~ ., scales = "free_y",
labeller = label_parsed,
switch = "y") +
theme(strip.background = element_blank(),
axis.title.y = element_blank(),
strip.text = element_text(size = rel(1))) +
guides(color = FALSE)
dummy <- data.frame(
x = 0,
y = c(-1.5, 2),
fun = "sin~(x^2)"
)
ggplot(df3, aes(x = x, y = y, color = fun)) +
geom_path() +
geom_blank(data = dummy) +
facet_grid(fun ~ ., scales = "free_y",
labeller = label_parsed,
switch = "y") +
theme(strip.background = element_blank(),
axis.title.y = element_blank(),
strip.text = element_text(size = rel(1))) +
guides(color = FALSE)
library(ggplot2)
library(data.table)
library(xlsx)
library(dplyr)
library(RColorBrewer)
library(plyr)
library(showtext)
# this method usees system font, so it may be different on Mac OS
# to check specific what :Times New Roman" names, check "font.paths()" and "font.files()"
# note that remember to uncomment the line in "1 plot-all.R" in theme
showtext.auto()
showtext.opts(dpi = 120)
font.add("Times New Roman", "times.ttf")
# set path
#############################################
path="E:/git/plot-yelp"
file.name="30times_result.xlsx"
#############################################
setwd(path)
source("5 preprocess.R")
#############################################
# set folder to store plots
output.name="plot-6datasets"
plot.title=""
# set output size (inch)
g.width=16
g.height=9
# set font zooming scale
k=1.5
#############################################
# plotting, for details go check script 1 plot-all.R
# select point shapes
# check shape library by typing: ?pch
point.shapes=15:19
library(ggplot2)
library(data.table)
library(xlsx)
library(dplyr)
library(RColorBrewer)
library(plyr)
library(showtext)
# this method usees system font, so it may be different on Mac OS
# to check specific what :Times New Roman" names, check "font.paths()" and "font.files()"
# note that remember to uncomment the line in "1 plot-all.R" in theme
showtext.auto()
showtext.opts(dpi = 120)
font.add("Times New Roman", "times.ttf")
# set path
#############################################
path="E:/git/plot-yelp"
file.name="30times_result.xlsx"
#############################################
setwd(path)
source("5 preprocess.R")
#############################################
# set folder to store plots
output.name="plot-6datasets"
plot.title=""
# set output size (inch)
g.width=16
g.height=9
# set font zooming scale
k=1.5
#############################################
# plotting, for details go check script 1 plot-all.R
# select point shapes
# check shape library by typing: ?pch
point.shapes=15:19
View(raw)
View(raw)
View(raw)
g.all[[i]]<-ggplot(data=filter(raw,Methods==names(point.shapes)[i]),
aes(Proportion,PPC,color=Methods,group=Methods,shape = Methods))+
geom_line(size=1.11)+
geom_point(size=2.5)+
theme_minimal()+
labs(title = names(point.shapes)[i],x = "Proportion",y = evaluate.list[i])+
theme(
text=element_text(family = "Times New Roman"),
legend.position="bottom",
legend.text = element_text(size=k*10),
legend.key.size=unit(.5,"inches"),
strip.text.x = element_text(size = k*12),
panel.border = element_rect(size = 1,fill=NA),
plot.title = element_text(size=k*15,hjust = k*0.5),
axis.title.x = element_text(size = k*15),
axis.title.y = element_text(size = k*15),
axis.text.x = element_text(size = k*10),
axis.text.y = element_text(size = k*10),
panel.background = element_rect(fill = "white"))+
scale_shape_manual(values=point.shapes,guide = guide_legend(title = NULL))+
scale_color_discrete(guide = guide_legend(title = NULL))
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
library(Cairo)
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 six dataset main.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
for(i in 1:6){
g.all[[i]]<-ggplot(data=filter(raw,Methods==names(point.shapes)[i]),
aes(Proportion,Pearson,color=Methods,group=Methods,shape = Methods))+
geom_line(size=1.11)+
geom_point(size=2.5)+
theme_minimal()+
labs(title = names(point.shapes)[i],x = "Proportion",y = evaluate.list[i])+
theme(
text=element_text(family = "Times New Roman"),
legend.position="bottom",
legend.text = element_text(size=k*10),
legend.key.size=unit(.5,"inches"),
strip.text.x = element_text(size = k*12),
panel.border = element_rect(size = 1,fill=NA),
plot.title = element_text(size=k*15,hjust = k*0.5),
axis.title.x = element_text(size = k*15),
axis.title.y = element_text(size = k*15),
axis.text.x = element_text(size = k*10),
axis.text.y = element_text(size = k*10),
panel.background = element_rect(fill = "white"))+
scale_shape_manual(values=point.shapes,guide = guide_legend(title = NULL))+
scale_color_discrete(guide = guide_legend(title = NULL))
if( i == 1 ){
legend <- get_legend(g.all[[1]])
}
g.all[[i]]<-g.all[[i]]+theme(legend.position = "none")
}
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
list.dataset<-unique(raw$Dataset)
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
for(i in 1:6){
g.all[[i]]<-ggplot(data=filter(raw,Dataset==list.dataset[i]),
aes(Proportion,RMSE,color=Methods,shape = Methods,group=Methods),
label=sprintf("%0.2f", round(Pearson, digits = 2)))+
geom_line(size=1.11)+
geom_point(size=2.5)+
theme_minimal()+
labs(title = list.dataset[i],x = "Proportion",y = "RMSE")+
theme(
text=element_text(family = "Times New Roman"),
legend.position="bottom",
legend.text = element_text(size=k*10),
legend.key.size=unit(.5,"inches"),
strip.text.x = element_text(size = k*12),
panel.border = element_rect(size = 1,fill=NA),
plot.title = element_text(size=k*15,hjust = 0.5),
axis.title.x = element_text(size = k*10),
axis.title.y = element_text(size = k*10),
axis.text.x = element_text(size = k*10),
axis.text.y = element_text(size = k*10),
panel.background = element_rect(fill = "white"))+
scale_shape_manual(values=point.shapes,guide = guide_legend(title = NULL))+
scale_color_discrete(guide = guide_legend(title = NULL))
if( i == 1 ){
legend <- get_legend(g.all[[1]])
}
g.all[[i]]<-g.all[[i]]+theme(legend.position = "none")
}
g.all[[[1]]]
g.all[[1]]
g.all[[3]]
for(i in 1:6){
g.all[[i]]<-ggplot(data=filter(raw,Dataset==list.dataset[i]),
aes(Proportion,RMSE,color=Methods,shape = Methods,group=Methods),
label=sprintf("%0.2f", round(Pearson, digits = 4)))+
geom_line(size=1.11)+
geom_point(size=2.5)+
theme_minimal()+
labs(title = list.dataset[i],x = "Proportion",y = "RMSE")+
theme(
text=element_text(family = "Times New Roman"),
legend.position="bottom",
legend.text = element_text(size=k*10),
legend.key.size=unit(.5,"inches"),
strip.text.x = element_text(size = k*12),
panel.border = element_rect(size = 1,fill=NA),
plot.title = element_text(size=k*15,hjust = 0.5),
axis.title.x = element_text(size = k*10),
axis.title.y = element_text(size = k*10),
axis.text.x = element_text(size = k*10),
axis.text.y = element_text(size = k*10),
panel.background = element_rect(fill = "white"))+
scale_shape_manual(values=point.shapes,guide = guide_legend(title = NULL))+
scale_color_discrete(guide = guide_legend(title = NULL))
if( i == 1 ){
legend <- get_legend(g.all[[1]])
}
g.all[[i]]<-g.all[[i]]+theme(legend.position = "none")
}
g.all[[1]]
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source("5 preprocess.R")
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
getwd()
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
View(raw)
names(raw)
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
raw[,c(1,2,3,4)]
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
View(data.temp)
raw[,c(1,2,3,4)]
ifelse(j==1,raw[,c(1,2,3,4)],raw[,c[1,2,3,5]])
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
fmt_dcimals(4)
round(2.33,2)
round(2.33,3)
?round
source("5 preprocess.R")
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
?seq
waiver()
?vaiver
?waiver
?seq
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
min(data.temp$value)
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
round(c(1,2,3),3)
round(c(1,2,3.2434),3)
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
?round
fmt_dcimals(2)
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 six dataset main.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/3 plot_features_density.R')
source('E:/git/plot-yelp/3 plot_histogram_density.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
