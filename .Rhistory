#  Recommender(rating.RM.train,method="SVDF"),
#  Recommender(rating.RM.train,method="UBCF"),
#  weights = c(.6, .1, .3)
weights = c(.1,.1,.4,.4)
#  weithgs=c(.1,.1,.5,.3)
)
gc(reset=T)
load("E:/8sem/thesis/src/0411 recommender.RData")
View(Region.Info)
Region.Info$area
Region.Info$countRbyLabel
Region.Info$countRbyLabel/Region.Info$area
load("E:/8sem/thesis/src/0416 我觉得这次测试集训练集划分完美啦.RData")
library(devtools)
install.packages("rJava")
install.packages("ffbase")
install_github("Myrrix-R-interface", "jwijffels", subdir="/Myrrixjars/pkg")
install_github("Myrrix-R-interface", "jwijffels", subdir="/Myrrix/pkg")
shiny::runApp('RRAPP1')
################################################
f.get.flavor<-function(usr_id,Kstar=.5){
usr.temp<-filter(UR.Flavor.test,user_id==usr_id)%>%
select(-user_id,-business_id)
usr.temp$categories<-gsub("'","",usr.temp$categories)
len<-dim(usr.temp)[1]
index=1
usr.flavor<-data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
)
for(index in 2:len){
usr.flavor<-rbind(usr.flavor,
data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
))
}
usr.flavor<-filter(usr.flavor,!grepl("Restaurants",flavor))
usr.flavor$diff<-as.numeric(max(usr.flavor$date)-usr.flavor$date)
usr.flavor$dateStar<-Kstar*(1/log(usr.flavor$diff+2.33))*exp(usr.flavor$stars)
result.flavor<-select(usr.flavor,flavor,dateStar)%>%
group_by(flavor)%>%
summarise(score=sum(dateStar))
# 数据标准化
result.flavor$score<-scale1(result.flavor$score,center=T,scale=T)
result.flavor$flavor<-as.character(result.flavor$flavor)
return(as.data.frame(result.flavor))
}
scale1<- function (x, center = TRUE, scale = TRUE)
{
x <- as.matrix(x)
nc <- ncol(x)
if (is.logical(center)) {
if (center) {
center <- colMeans(x, na.rm = TRUE)
x <- sweep(x, 2L, center, check.margin = FALSE)
}
}
else if (is.numeric(center) && (length(center) == nc))
x <- sweep(x, 2L, center, check.margin = FALSE)
else stop("length of 'center' must equal the number of columns of 'x'")
if (is.logical(scale)) {
if (scale) {
f <- function(v) {
v <- v[!is.na(v)]
sqrt(sum(v^2)/max(1, length(v) - 1L))
}
scale <- apply(x, 2L, f)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
}
}
else if (is.numeric(scale) && length(scale) == nc)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
else stop("length of 'scale' must equal the number of columns of 'x'")
#if (is.numeric(center))
#    attr(x, "scaled:center") <- center
#if (is.numeric(scale))
#    attr(x, "scaled:scale") <- scale
x
}
engine.random<-function(x,y,Radius=0.01,TopN=10,Flavour=NULL){
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
if(!is.null(Flavour)){
flavor.list<-vector()
for(flavor.ith in 1:length(Flavour$flavor)){
flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
}
B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
len=dim(B.inO)[1]
if(len<TopN)
return(B.inO$business_id)
else
return(sample_n(B.inO,TopN)$business_id)
}
engine.popular<-function(x,y,Radius=0.01,TopN=8,Flavour=NULL,Kstar=0.5,sigma=0.233){
# 得到范围内餐馆
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
# 加入用户对口味的偏好
if(!is.null(Flavour)){
for(flavor.ith in 1:length(Flavour$flavor)){
#      flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars =
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars+sigma*Flavour$score[flavor.ith]
}
#    B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
# 检验剩余餐馆是否小于topN，如小于直接输出所有结果
len=dim(B.inO)[1]
if(len<TopN){
return(B.inO$business_id)
}
else{
# 以餐馆进行分组，统计UR.Rst中每个餐馆的区域评分
UR.inO<-select(UR.Rst.2,-stars)%>%
filter(business_id %in% B.inO$business_id)%>%
left_join(select(B.inO,business_id,stars))%>%
mutate(diff=as.numeric(max(date)-date),newstars=exp(stars))%>%
mutate(logdiff=1/log(diff+2.33),dateStar=Kstar*logdiff*newstars)%>%
group_by(business_id)%>%
summarise(score=sum(dateStar))%>%
arrange(desc(score))
B.inO<-as.data.frame(UR.inO[1:TopN,])
return(B.inO)
}
}
f.dist.xy<-function(x1,y1,x2,y2){
return(sum((x1-x2)^2+(y1-y2)^2)^0.5)
#    return(sum((p1-p2)^2)^0.5)
}
runApp('RRAPP1')
shiny::runApp('RRAPP1')
f.get.flavor<-function(usr_id,Kstar=.5){
usr.temp<-filter(UR.Flavor.test,user_id==usr_id)%>%
select(-user_id,-business_id)
usr.temp$categories<-gsub("'","",usr.temp$categories)
len<-dim(usr.temp)[1]
index=1
usr.flavor<-data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
)
for(index in 2:len){
usr.flavor<-rbind(usr.flavor,
data.frame(date=usr.temp$date[index],stars=usr.temp$stars[index],
flavor=as.vector(strsplit(usr.temp$categories[index],",")[[1]])
))
}
usr.flavor<-filter(usr.flavor,!grepl("Restaurants",flavor))
usr.flavor$diff<-as.numeric(max(usr.flavor$date)-usr.flavor$date)
usr.flavor$dateStar<-Kstar*(1/log(usr.flavor$diff+2.33))*exp(usr.flavor$stars)
result.flavor<-select(usr.flavor,flavor,dateStar)%>%
group_by(flavor)%>%
summarise(score=sum(dateStar))
# 数据标准化
result.flavor$score<-scale1(result.flavor$score,center=T,scale=T)
result.flavor$flavor<-as.character(result.flavor$flavor)
return(as.data.frame(result.flavor))
}
scale1<- function (x, center = TRUE, scale = TRUE)
{
x <- as.matrix(x)
nc <- ncol(x)
if (is.logical(center)) {
if (center) {
center <- colMeans(x, na.rm = TRUE)
x <- sweep(x, 2L, center, check.margin = FALSE)
}
}
else if (is.numeric(center) && (length(center) == nc))
x <- sweep(x, 2L, center, check.margin = FALSE)
else stop("length of 'center' must equal the number of columns of 'x'")
if (is.logical(scale)) {
if (scale) {
f <- function(v) {
v <- v[!is.na(v)]
sqrt(sum(v^2)/max(1, length(v) - 1L))
}
scale <- apply(x, 2L, f)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
}
}
else if (is.numeric(scale) && length(scale) == nc)
x <- sweep(x, 2L, scale, "/", check.margin = FALSE)
else stop("length of 'scale' must equal the number of columns of 'x'")
#if (is.numeric(center))
#    attr(x, "scaled:center") <- center
#if (is.numeric(scale))
#    attr(x, "scaled:scale") <- scale
x
}
engine.random<-function(x,y,Radius=0.01,TopN=10,Flavour=NULL){
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
if(!is.null(Flavour)){
flavor.list<-vector()
for(flavor.ith in 1:length(Flavour$flavor)){
flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
}
B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
len=dim(B.inO)[1]
if(len<TopN)
return(B.inO$business_id)
else
return(sample_n(B.inO,TopN)$business_id)
}
engine.popular<-function(x,y,Radius=0.01,TopN=8,Flavour=NULL,Kstar=0.5,sigma=0.233){
# 得到范围内餐馆
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
# 加入用户对口味的偏好
if(!is.null(Flavour)){
for(flavor.ith in 1:length(Flavour$flavor)){
#      flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars =
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars+sigma*Flavour$score[flavor.ith]
}
#    B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
# 检验剩余餐馆是否小于topN，如小于直接输出所有结果
len=dim(B.inO)[1]
if(len<TopN){
return(B.inO$business_id)
}
else{
# 以餐馆进行分组，统计UR.Rst中每个餐馆的区域评分
UR.inO<-select(UR.Rst.2,-stars)%>%
filter(business_id %in% B.inO$business_id)%>%
left_join(select(B.inO,business_id,stars))%>%
mutate(diff=as.numeric(max(date)-date),newstars=exp(stars))%>%
mutate(logdiff=1/log(diff+2.33),dateStar=Kstar*logdiff*newstars)%>%
group_by(business_id)%>%
summarise(score=sum(dateStar))%>%
arrange(desc(score))
B.inO<-as.data.frame(UR.inO[1:TopN,])
return(B.inO)
}
}
f.dist.xy<-function(x1,y1,x2,y2){
return(sum((x1-x2)^2+(y1-y2)^2)^0.5)
#    return(sum((p1-p2)^2)^0.5)
}
runApp('RRAPP1')
library(dplyr)
library(data.table)
library(igraph)
library(dplyr)
library(data.table)
library(ggplot2)
library(RColorBrewer)
library(showtext)
font.families()
library(MASS)
library(MASS)
dirname(sys.frame(1)$ofile)
sys.frame(1)
script.dir <- dirname(sys.frame(1)$ofile)
data1<-read.csv("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE,sep=",")    #????训锟斤拷??????
View(data1)
library(MASS)
fit<-lm(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word+breview_count
+bstars+fans+ureview_count+average_stars,data=data_training)
data_training<-as.data.frame(fread("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE))    #????训锟斤拷??????
library(data.table)
data_training<-as.data.frame(fread("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE))    #????训锟斤拷??????
fit<-lm(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word+breview_count
+bstars+fans+ureview_count+average_stars,data=data_training)
fit<-lm(stars~polarity+subjectivity+log(letter)+word+votes_cool+votes_funny+votes_useful
+log(breview_count)+bstars+log(ureview_count)+average_stars+fans+gender,data=data_training)
fit<-lm(stars~polarity+subjectivity+word+votes_useful+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata)
data1<-as.data.frame(fread("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE))    #????训锟斤拷??????
attach(data1)
mydata<-data.frame(polarity,subjectivity,log_letter=log(data1$letter),word,votes_cool,votes_funny,votes_useful,log_breview_count=log(data1$breview_count),bstars,fans,log_ureview_count=log(data1$ureview_count),average_stars,gender,stars)
View(mydata)
detach(data1)
fit<-lm(stars~polarity+subjectivity+log_letter+word+votes_cool+votes_funny+votes_useful      #取?????????斜?锟斤拷
+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata)
summary.fit<-summary(fit)
write.csv(summary.fit$coefficients,"summary_fit1.csv",row.names=F)
fit<-lm(stars~polarity+subjectivity+word+votes_useful
+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata)
summary.fit<-summary(fit)
getwd()
library(MASS)
fit<-lm(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word+breview_count
+bstars+fans+ureview_count+average_stars,data=data_training)
library(leaps)
attach(data_training)
leaps<-regsubsets(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word
+breview_count+bstars+fans+ureview_count+average_stars,data=data_training,nbest=2)
leaps<-regsubsets(stars~polarity+subjectivity+log(letter)+word+votes_cool+votes_funny+votes_useful
+log(breview_count)+bstars+log(ureview_count)+average_stars+fans+gender,data=data_training,nbest=2)
leaps<-regsubsets(stars~polarity+subjectivity+letter+votes_cool
+breview_count+bstars+fans+ureview_count+average_stars+gender,data=data_training,nbest=2)
leaps<-regsubsets(stars~polarity+subjectivity+log(letter)+votes_cool
+log(breview_count)+bstars+log(ureview_count)+average_stars+fans+gender,data=data_training,nbest=2)
attach(mydata)
leaps<-regsubsets(stars~polarity+subjectivity+word+votes_useful+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata,nbest=2)
summary(leaps)
plot(leaps,scale="r2")
summary.regsubsets(leaps)
summary(leaps)
leaps.summary<-summary(leaps)
library(car)
qqPlot(fit,labels=row.names(data),id.method="identify",simulate=TRUE,
main="Q-Q图",xlab="标准化预测值",ylab="残差值")
library("gcookbook")
install.packages("gcookbook")
library("gcookbook")
residplot<-function(fit,nbreaks=100){
z<-rstudent(fit)
hist(z,breaks=nbreaks,freq=FALSE,
xlab="标准化残差",ylab="密度",
main="误差分布")
rug(jitter(z),col="brown")
curve(dnorm(x,mean=mean(z),sd=sd(z)),
add=TRUE,col="blue",lty=2)
lines(density(z)$x,density(z)$y,
col="red",lwd=2,lty=2)
legend("topright",legend=c("正态分布曲线","内核密度曲线"),
lty=1:2,col=c("blue","red"),cex=.7)
}
residplot(fit)
library(proxy)
summary(pr_DB)
?pch
load("E:/8sem/thesis/src/中期答辩这一波茫茫的数据.RData")
View(B.inO)
View(temp.popular)
View(temp.popular.flavor)
rm(temp.popular,temp.popular.flavor,temp.random,temp.random.flavor,recommendation)
View(Flavour)
View(UR.Flavor.test)
View(UR.Flavor.test)
length(unique(UR.Flavor.test$user_id))
rm(usr.result,usr.recommender,U.sample.list)
rm(res,res.IBCF,sample.ith,Kstar,sigma)
rm(TopN)
x <- seq(from = -5, to = 5, by = 0.05)
df <- data.frame(
x = x,
fun_a = sin(x^2),
fun_b = 50 * sin(x)
)
View(df)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
df2 <- df %>%
gather(key = fun, value = y, -x)
library(tidyverse)
df2 <- df %>%
gather(key = fun, value = y, -x)
View(df2)
df3 <- df %>%
rename(`sin~(x^2)` = fun_a, `'50'~sin~(x)` = fun_b) %>%
gather(key = fun, value = y, -x)
View(df3)
View(df2)
View(df3)
ggplot(df3, aes(x = x, y = y, color = fun)) +
geom_path() +
facet_grid(fun ~ ., scales = "free_y",
labeller = label_parsed,
switch = "y") +
theme(strip.background = element_blank(),
axis.title.y = element_blank(),
strip.text = element_text(size = rel(1))) +
guides(color = FALSE)
dummy <- data.frame(
x = 0,
y = c(-1.5, 2),
fun = "sin~(x^2)"
)
ggplot(df3, aes(x = x, y = y, color = fun)) +
geom_path() +
geom_blank(data = dummy) +
facet_grid(fun ~ ., scales = "free_y",
labeller = label_parsed,
switch = "y") +
theme(strip.background = element_blank(),
axis.title.y = element_blank(),
strip.text = element_text(size = rel(1))) +
guides(color = FALSE)
# set path and output file names
path="E:/8sem/YELP/LinkPrediction/plot-yelp"
output.name<-"graph-yelp"
setwd(path)
# set output file size and font zooming level
g.width=16
g.height=16
k=1
flag.deg=F
theshold.quantile<-0.98
# set path and output file names
path="E:/git/plot-yelp"
output.name<-"graph-yelp"
setwd(path)
# set output file size and font zooming level
g.width=16
g.height=16
k=1
flag.deg=F
theshold.quantile<-0.98
source("2 plot_graph.R")
summary(data.yelp)
source('E:/git/plot-yelp/2 plot_graph_main.R')
library(data.table)
library(dplyr)
library(igraph)
library(showtext)
library(Cairo)
# changed font to Times New Roman
showtext.auto()
showtext.opts(dpi = 240)
font.add("Times New Roman", "times.ttf")
# data preProcessing
setwd(path)
data.yelp<-as.data.frame(fread("src/yelp_ori.txt",header=F))
names(data.yelp)<-c("from","to","weight")
if(flag.deg==F){
# create graph filtered by weight
graph.df=data.yelp[data.yelp$weight==max(data.yelp$weight)]
# theshold.weight<-quantile(data.yelp$weight,theshold.quantile)
# graph.df<-data.yelp[data.yelp$weight>theshold.weight,]
} else{
# create graph filtered by degree
g <- graph_from_data_frame(data.yelp,directed=F)
degree<-degree(g)
theshold.deg<-quantile(degree,theshold.quantile)
degree<-data.frame(id=as.numeric(as.character(names(degree))),deg=degree)%>%
filter(deg>theshold.deg)
graph.df<-filter(data.yelp,from%in% degree$id,to%in% degree$id)
}
source("2 plot_graph.R")
cairo_ps(paste("plot/graph/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
plot(g, layout=layout_with_dh)
dev.off()
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
source('E:/git/plot-yelp/5 six dataset main.R')
source('E:/git/plot-yelp/5 plot_evaluate_6datasets.R')
# set path and output file names
path="E:/git/plot-yelp"
output.name<-"graph-yelp"
setwd(path)
# set output file size and font zooming level
g.width=16
g.height=16
k=1
flag.deg=F
theshold.quantile<-0.98
source('E:/git/plot-yelp/1 plot_evaluate.R')
grid.result
source('E:/git/plot-yelp/1 plot_evaluate.R')
?grid.arrange
grid.arrange(g.result[[1]], g.result[[2]], legend, ncol=2,nrow=2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
View(graph.df)
source('E:/git/plot-yelp/2 plot_graph_main.R')
cairo_ps(paste("plot/graph/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
plot(g, layout=layout.fruchterman.reingold(g, niter=10000, area=30*vcount(g)^2))#layout_with_dh)
dev.off()
E(g)$width<-graph.df$weight/6
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
14287/35520
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
View(graph.df)
degree(g)
degree<-degree(g)
head(degree)
degree<-data.frame(id=as.numeric(as.character(names(degree))),deg=degree)%>%
filter(deg>theshold.deg)
degree<-data.frame(id=as.numeric(as.character(names(degree))),deg=degree)
View(degree)
summary(degree)
summary(log(degree))
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
?niter
?layout.fruchterman.reingold
?floor
source('E:/git/plot-yelp/2 plot_graph_main.R')
colorRampPalette(brewer.pal(4,"Greens"))(max(degree))
max(degree)
max(rank(degree))
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
max(ceiling(log(degree)))
brewer.pal.info
display.brewer.all()
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
source('E:/git/plot-yelp/2 plot_graph_main.R')
