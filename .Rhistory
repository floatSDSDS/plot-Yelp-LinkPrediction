legend.key.size=unit(.5,"inches"),
text=element_text(family = "Times New Roman"),
legend.title=element_blank(),
legend.text = element_text(size=k*10),
strip.text = element_text(size=k*15),
axis.text.x = element_text(size = k*10),
axis.text.y = element_text(size = k*15),
axis.title.x = element_text(size = k*15),
axis.title.y = element_text(size = k*15)
)+
scale_shape_manual(values=point.shapes,guide = guide_legend(title = NULL,nrow = 2))+
scale_color_discrete(guide=guide_legend(title=NULL))
ggsave(filename=paste("result/","evaluation_base",".png",sep=""),device="png",
width = 10,height =7,units = "in")
save.image("E:/8sem/thesis/src/GeoC.RData")
summary(recommendation3)
for(i in 1:5){
print(dim(recommendation3[[i]]))
}
recommendation3[[4]]<-recommendation3[[4]][1:5654,]
for(i in 1:5){
print(dim(recommendation3[[i]]))
}
rm(B.Basic,cos.R,cos.U,eva,eva.melt,eva2)
rm(labeltemp,nmf.temp,Region.Info,res.rst.id,subset.R,UBS,URR)
rm(check.temp,eva.temp,i,inter.rst.id,ith,j,k,label.flavor,label.geo,len,N.)
rm(point.shapes,popular.model,Precision,recommendation2,rst.index,test.rst.id,UBS.SM)
rm(UlikeR.index,UlikeR.stars)
rm(add_predictions_to_prediction_matrix,cal_cor,cal_cos,calculate_predictions,engine.popular,engine.random)
rm(f_AA,f_addBasic,f_addcentr,f_addDegree)
rm(f_addLocal,f_addPath,f_CN,f_diffdeg)
rm(rmse_function,find_similarities)
View(f.get.flavor)
rm(predict_cf)
rm(f.mode,f.SLIM,f.SLIM.main,f_undirected)
rm(f_HDI,f_HPI,f_Jaccard,f_Katz,f_LHNI,f_PA,f_RA,f_preprocessed)
rm(f_getIndex,f_LocalPath,f_Salton,f_LocalPath)
rm(f.evauate,f.sim.item,f_Sorenson)
View(weight.community)
View(f_getKey)
rm(weight.community,f_getKey,f.popMostSimilar.cos)
rm(norm1,norm2,pal)
View(f.dist.xy)
rm(f.dist.xy,f.cotag)
rm(evaluate_cf())
rm(evaluate_cf
）
rm(evaluate_cf）
rm(evaluate_cf)
View(label)
projection_usr<-data.frame(
baseindex<-usr.index,
GeoCindex<-pack.usr.name
)
rm(usr.index,pack.usr.name)
rm(UR.Rst.2)
View(label.info)
rm(label.info)
View(projection_usr)
projection_usr<-data.frame(
baseindex=usr.index,
GeoCindex=pack.usr.name
)
projection_usr<-data.frame(
baseindex=baseindex,
GeoCindex=GeoCindex
)
View(projection_usr)
rm(baseindex,GeoCindex)
View(evaluation)
popular.model<-list()
for(j in 1:9){
cat("pack",j,"\r")
URR<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
len=length(unique(URR$user_id))
findPopular<-group_by(URR,business_id)%>%
mutate(count=n())%>%
summarise(popular=sum(stars*count))%>%
arrange(desc(popular))
popular.model[[j]]<-t(mapply(function(i){
return(findPopular$business_id[1:30])
},1:len))
rm(findPopular)
}
rm(j,len)
rm(URR)
f.get.flavor(1)
recommendation3[[1]][1,]
dimnames(recommendation3[[1]])
for(j in 1:5){
dimnames(recommendation3[[j]][1])<-projection_usr$GeoCindex
}
dimnames(recommendation3[[j]])[1]
for(j in 1:5){
dimnames(recommendation3[[j]])[1]<-projection_usr$GeoCindex
}
projection_usr$GeoCindex
projection_usr$baseindex<-as.character(projection_usr$GeoCindex)
View(label)
projection_usr$GeoCindex<-as.character(projection_usr$GeoCindex)
projection_usr$baseindex<-as.character(label$user_id)
for(j in 1:5){
dimnames(recommendation3[[j]])[1]<-projection_usr$GeoCindex
}
projection_usr$baseindex
for(j in 1:5){
dimnames(recommendation3[[j]])[[1]]<-projection_usr$GeoCindex
}
recommendation[[1]]["96EHMTBwsy6JApvbyLYb-g",]
recommendation3[[1]]["96EHMTBwsy6JApvbyLYb-g",]
write.csv(evaluation,"/result/evaluation_GeoC0605.csv",row.names=F)
getwd()
write.csv(evaluation,"evaluation_GeoC0605.csv",row.names=F)
rm(evaluation)
rm(j)
save.image("E:/8sem/thesis/GeoCUI/data/modelGeoC.RData")
load("E:/8sem/thesis/0327.RData")
shiny::runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
load("E:/8sem/thesis/GeoCUI/data/modelGeoC.RData")
UR.Flavor.test<-as.data.frame(fread("data/UR.Flavor.test.csv",header=T))
UR.Flavor.test<-as.data.frame(fread("E:/8sem/thesis/GeoCUI/data/UR.Flavor.test.csv",header=T))
View(UR.Flavor.test)
sample(user,3)
f.get.flavor(1)
f.get.flavor(UR.Rst.2.test$user_id[1])
UR.Rst.2.test$user_id[1]
UR.Flavor.test$date<-as.Date(UR.Flavor.test$date)
f.get.flavor(UR.Rst.2.test$user_id[1])
load("E:/8sem/thesis/GeoCUI/data/model.RData")
recommendation2<-list(recommendation,recommendation3)
summary(recommendation2)
for(i in 7:11){
recommendation[[i]]<-recommendation3[[i-6]]
}
summary(recommendation)
UR.Rst.2.test$user_id[1]
recommendation[[1]][UR.Rst.2.test$user_id[1]]
recommendation[[1]][UR.Rst.2.test$user_id[1],]
recommendation[[6]][UR.Rst.2.test$user_id[1],]
recommendation[[7]][UR.Rst.2.test$user_id[1],]
class(recommendation[[7]][UR.Rst.2.test$user_id[1],])
recommendation[[7]][UR.Rst.2.test$user_id[1],][1]
recommendation[[7]][UR.Rst.2.test$user_id[1],][2]
as.character(recommendation[[7]][UR.Rst.2.test$user_id[1],][2])
?actionButton
summary(UR.Rst.2.train.temporal)
View(user)
?clearShapes
View(UR.Rst.2.test)
as.character(recommena)
as.character(recommendation[[7]][1,])
B<-select(B.Basic.Rst.2,business_id,name,full_address)
runApp('GeoCUI')
runApp('GeoCUI')
View(UR.Rst.2.train.temporal)
names(UR.Rst.2.train.temporal)
runApp('GeoCUI')
runApp('GeoCUI')
View(B.Basic.Rst.2)
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
engine_list
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
recommend <- reactive({
filter(B.Basic.Rst.2,business_id %in% as.character(recommendation[[input$topN]][input$UIndex,]))
})
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
shiny::runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
summary(engine_list)
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
shiny::runApp('GeoCUI')
shiny::runApp('GeoCUI')
library(wordcloud2)
data<-data.frame(
word=c("数据挖掘","一大坨数据报告","机器学习","花式聚类","无监督学习","推荐系统","时空数据","局部模型","Yelp","LBS","LBSNs","深夜报社美食部"),
freq=c(5,2,3,4,3,5,3,3,2,2,2,2)
)
View(data)
wordcloud2(data)
wordcloud2(data,.4)
load("E:/8sem/thesis/src/2 GeoOnlyAZNV/170326二级地理聚类标签商家池评论池.RData")
View(B.Basic)
temp<-select(B.Basic,business_id,categories,label)
library(dplyr)
temp<-select(B.Basic,business_id,categories,label)
write.table(temp,"id_cate_label.txt",row.names = F,col.names = F)
load("E:/8sem/thesis/src/modelGeoC.RData")
NMF.model[[1]]
# GeoC
library(leaflet)
library(dplyr)
library(ggplot2)
library(fpc)
library(RColorBrewer)
library(showtext)
library(sp)
library(snowfall)
library(igraph)
library(scales)
library(data.table)
library(qlcMatrix)
library(recommenderlab)
library(NMF)
NMF.model<-list()
for(j in 1){
print(paste("pack",j))
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
len=c(length(unique(UBS$user_id)),  length(unique(UBS$business_id)))
RRM<-as(UBS,"realRatingMatrix")
RRM<-as(RRM,"dgCMatrix")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
ba<-basis(nmf)
co<-coef(nmf)
nmf.temp<-mapply(function(i){
mapply(function(j){
cat(i,"-",j,"\r")
return(sum(ba[i,]*co[,j]))
},1:len[2])
},1:len[1])
nmf.temp<-t(nmf.temp)
dimnames(nmf.temp)[[2]]<-unique(UBS$business_id)
NMF.model[[j]]<-mapply(function(i){
cat(i,"\r")
return(names(-sort(-nmf.temp[i,])[1:30]))
},1:len[1])
rm(ba,co,RRM,nmf)
}
for(j in 1){
print(paste("pack",j))
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
len=c(length(unique(UBS$user_id)),  length(unique(UBS$business_id)))
RRM<-as(UBS,"realRatingMatrix")
RRM<-as(RRM,"dgCMatrix")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
ba<-basis(nmf)
co<-coef(nmf)
nmf.temp<-mapply(function(i){
mapply(function(j){
cat(i,"-",j,"\r")
return(sum(ba[i,]*co[,j]))
},1:len[2])
},1:len[1])
nmf.temp<-t(nmf.temp)
dimnames(nmf.temp)[[2]]<-unique(UBS$business_id)
NMF.model[[j]]<-mapply(function(i){
cat(i,"\r")
return(names(-sort(-nmf.temp[i,])[1:30]))
},1:len[1])
# rm(ba,co,RRM,nmf)
}
nmf@residuals
nmf@fit
nmf@rng
nmf@\
nmf@residuals
nmf@rng
nmf@call\
nmf@call
nmf@misc
nmf@runtime
?nmf
nmf@method
nmf@fit
nmf@parameters
nmf@call
nmf@misc
names(nmf@residuals)
?while
()
as.numeric(nmf@residuals)
as.numeric(names(nmf@residuals))
for(j in 1:9){
print(paste("pack",j))
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
len=c(length(unique(UBS$user_id)),  length(unique(UBS$business_id)))
RRM<-as(UBS,"realRatingMatrix")
RRM<-as(RRM,"dgCMatrix")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
while(as.numeric(names(nmf@residuals))==2000){
print("nmf looping")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
}
ba<-basis(nmf)
co<-coef(nmf)
nmf.temp<-mapply(function(i){
mapply(function(j){
cat(i,"-",j,"\r")
return(sum(ba[i,]*co[,j]))
},1:len[2])
},1:len[1])
nmf.temp<-t(nmf.temp)
dimnames(nmf.temp)[[2]]<-unique(UBS$business_id)
NMF.model[[j]]<-mapply(function(i){
cat(i,"\r")
return(names(-sort(-nmf.temp[i,])[1:30]))
},1:len[1])
# rm(ba,co,RRM,nmf)
}
for(j in 1:9){
print(paste("pack",j))
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
len=c(length(unique(UBS$user_id)),  length(unique(UBS$business_id)))
RRM<-as(UBS,"realRatingMatrix")
RRM<-as(RRM,"dgCMatrix")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
while(as.numeric(names(nmf@residuals))==2000){
print("nmf looping")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,40,20)),method="offset",.opt="vP6")
}
ba<-basis(nmf)
co<-coef(nmf)
nmf.temp<-mapply(function(i){
mapply(function(j){
cat(i,"-",j,"\r")
return(sum(ba[i,]*co[,j]))
},1:len[2])
},1:len[1])
nmf.temp<-t(nmf.temp)
dimnames(nmf.temp)[[2]]<-unique(UBS$business_id)
NMF.model[[j]]<-mapply(function(i){
cat(i,"\r")
return(names(-sort(-nmf.temp[i,])[1:30]))
},1:len[1])
# rm(ba,co,RRM,nmf)
}
save.image("E:/8sem/thesis/src/新GeoC.RData")
dim(NMF.mode[[1]])
dim(NMF.model[[1]])
for(ith in 1:9){
# recommendation3[[1]]<-rbind(recommendation3[[1]],random.model[[ith]])
# recommendation3[[2]]<-rbind(recommendation3[[2]],popular.model[[ith]])
# recommendation3[[3]]<-rbind(recommendation3[[3]],UBCF.model[[ith]])
# recommendation3[[4]]<-rbind(recommendation3[[4]],IBCF.model[[ith]])
NMF.model[[ith]]<-t(NMF.model[[ith]])
recommendation3[[5]]<-rbind(recommendation3[[5]],NMF.model[[ith]])
# print(dim(NMF.model[[ith]]))
}
for (ith in 1:30){
# recommendation3[[1]][,ith]<-as.character(recommendation3[[1]][,ith])
# recommendation3[[2]][,ith]<-as.character(recommendation3[[2]][,ith])
# recommendation3[[3]][,ith]<-as.character(recommendation3[[3]][,ith])
# recommendation3[[4]][,ith]<-as.character(recommendation3[[4]][,ith])
recommendation3[[5]][,ith]<-as.character(recommendation3[[5]][,ith])
# recommendation3[[3]][,ith]<-as.character(recommendation3[[3]][,ith])
}
N.=30
for(j in 1:6){
for(ith in 5){
print(paste(ith,"-",j))
eva.temp[[ith]]<-data.frame(precision=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="precision")),
recall=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="recall")),
fmeasure=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="fmeasure")),
HR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="HR")),
ARHR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="ARHR")))
evaluation[ith+(j-1)*5,1]<-mean(eva.temp[[ith]]$precision)
evaluation[ith+(j-1)*5,2]<-mean(eva.temp[[ith]]$recall)
evaluation[ith+(j-1)*5,3]<-mean(eva.temp[[ith]]$fmeasure)
evaluation[ith+(j-1)*5,4]<-sum(eva.temp[[ith]]$HR)/5654
evaluation[ith+(j-1)*5,5]<-mean(eva.temp[[ith]]$ARHR)
}
N.=N.-5
}
pack.usr.name<-vector()
for(j in 1:9){
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
pack.usr.name=c(pack.usr.name,unique(UBS$user_id))
}
for(j in 1:6){
for(ith in 5){
print(paste(ith,"-",j))
eva.temp[[ith]]<-data.frame(precision=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="precision")),
recall=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="recall")),
fmeasure=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="fmeasure")),
HR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="HR")),
ARHR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="ARHR")))
evaluation[ith+(j-1)*5,1]<-mean(eva.temp[[ith]]$precision)
evaluation[ith+(j-1)*5,2]<-mean(eva.temp[[ith]]$recall)
evaluation[ith+(j-1)*5,3]<-mean(eva.temp[[ith]]$fmeasure)
evaluation[ith+(j-1)*5,4]<-sum(eva.temp[[ith]]$HR)/5654
evaluation[ith+(j-1)*5,5]<-mean(eva.temp[[ith]]$ARHR)
}
N.=N.-5
}
eva.temp<-list()
N.=30
eva.temp<-list()
evaluation<-matrix(0,30,5)
N.=30
for(j in 1:6){
for(ith in 5){
print(paste(ith,"-",j))
eva.temp[[ith]]<-data.frame(precision=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="precision")),
recall=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="recall")),
fmeasure=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="fmeasure")),
HR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="HR")),
ARHR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="ARHR")))
evaluation[ith+(j-1)*5,1]<-mean(eva.temp[[ith]]$precision)
evaluation[ith+(j-1)*5,2]<-mean(eva.temp[[ith]]$recall)
evaluation[ith+(j-1)*5,3]<-mean(eva.temp[[ith]]$fmeasure)
evaluation[ith+(j-1)*5,4]<-sum(eva.temp[[ith]]$HR)/5654
evaluation[ith+(j-1)*5,5]<-mean(eva.temp[[ith]]$ARHR)
}
N.=N.-5
}
View(evaluation)
recommendation3[[5]]<-data.frame()
for(ith in 1:9){
# recommendation3[[1]]<-rbind(recommendation3[[1]],random.model[[ith]])
# recommendation3[[2]]<-rbind(recommendation3[[2]],popular.model[[ith]])
# recommendation3[[3]]<-rbind(recommendation3[[3]],UBCF.model[[ith]])
# recommendation3[[4]]<-rbind(recommendation3[[4]],IBCF.model[[ith]])
# NMF.model[[ith]]<-t(NMF.model[[ith]])
recommendation3[[5]]<-rbind(recommendation3[[5]],NMF.model[[ith]])
# print(dim(NMF.model[[ith]]))
}
dim(recommendation3[[5]])
for (ith in 1:30){
# recommendation3[[1]][,ith]<-as.character(recommendation3[[1]][,ith])
# recommendation3[[2]][,ith]<-as.character(recommendation3[[2]][,ith])
# recommendation3[[3]][,ith]<-as.character(recommendation3[[3]][,ith])
# recommendation3[[4]][,ith]<-as.character(recommendation3[[4]][,ith])
recommendation3[[5]][,ith]<-as.character(recommendation3[[5]][,ith])
# recommendation3[[3]][,ith]<-as.character(recommendation3[[3]][,ith])
}
eva.temp<-list()
evaluation<-matrix(0,30,5)
N.=30
for(j in 1:6){
for(ith in 5){
print(paste(ith,"-",j))
eva.temp[[ith]]<-data.frame(precision=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="precision")),
recall=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="recall")),
fmeasure=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="fmeasure")),
HR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="HR")),
ARHR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="ARHR")))
evaluation[ith+(j-1)*5,1]<-mean(eva.temp[[ith]]$precision)
evaluation[ith+(j-1)*5,2]<-mean(eva.temp[[ith]]$recall)
evaluation[ith+(j-1)*5,3]<-mean(eva.temp[[ith]]$fmeasure)
evaluation[ith+(j-1)*5,4]<-sum(eva.temp[[ith]]$HR)/5654
evaluation[ith+(j-1)*5,5]<-mean(eva.temp[[ith]]$ARHR)
}
N.=N.-5
}
View(evaluation)
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
?scale_x_discrete
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
