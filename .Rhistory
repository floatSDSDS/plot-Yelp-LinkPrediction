len=dim(B.inO)[1]
if(len<TopN)
return(B.inO$business_id)
else
return(sample_n(B.inO,TopN)$business_id)
}
engine.popular<-function(x,y,Radius=0.01,TopN=8,Flavour=NULL,Kstar=0.5,sigma=0.233){
# 得到范围内餐馆
dist<-mapply(f.dist.xy,x,y,
B.Basic.Rst.2$latitude,B.Basic.Rst.2$longitude)
B.inO<-B.Basic.Rst.2[dist<Radius,]
# 加入用户对口味的偏好
if(!is.null(Flavour)){
for(flavor.ith in 1:length(Flavour$flavor)){
#      flavor.list<-c(flavor.list,filter(B.inO,grepl(Flavour$flavor[flavor.ith],categories))$business_id)
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars =
B.inO[grepl(Flavour$flavor[flavor.ith],B.inO$categories),]$stars+sigma*Flavour$score[flavor.ith]
}
#    B.inO<-filter(B.inO,business_id %in% unique(flavor.list))
}
# 检验剩余餐馆是否小于topN，如小于直接输出所有结果
len=dim(B.inO)[1]
if(len<TopN){
return(B.inO$business_id)
}
else{
# 以餐馆进行分组，统计UR.Rst中每个餐馆的区域评分
UR.inO<-select(UR.Rst.2,-stars)%>%
filter(business_id %in% B.inO$business_id)%>%
left_join(select(B.inO,business_id,stars))%>%
mutate(diff=as.numeric(max(date)-date),newstars=exp(stars))%>%
mutate(logdiff=1/log(diff+2.33),dateStar=Kstar*logdiff*newstars)%>%
group_by(business_id)%>%
summarise(score=sum(dateStar))%>%
arrange(desc(score))
B.inO<-as.data.frame(UR.inO[1:TopN,])
return(B.inO)
}
}
f.dist.xy<-function(x1,y1,x2,y2){
return(sum((x1-x2)^2+(y1-y2)^2)^0.5)
#    return(sum((p1-p2)^2)^0.5)
}
runApp('RRAPP1')
library(dplyr)
library(data.table)
library(igraph)
library(dplyr)
library(data.table)
library(ggplot2)
library(RColorBrewer)
library(showtext)
font.families()
library(MASS)
library(MASS)
dirname(sys.frame(1)$ofile)
sys.frame(1)
script.dir <- dirname(sys.frame(1)$ofile)
data1<-read.csv("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE,sep=",")    #????训锟斤拷??????
View(data1)
library(MASS)
fit<-lm(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word+breview_count
+bstars+fans+ureview_count+average_stars,data=data_training)
data_training<-as.data.frame(fread("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE))    #????训锟斤拷??????
library(data.table)
data_training<-as.data.frame(fread("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE))    #????训锟斤拷??????
fit<-lm(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word+breview_count
+bstars+fans+ureview_count+average_stars,data=data_training)
fit<-lm(stars~polarity+subjectivity+log(letter)+word+votes_cool+votes_funny+votes_useful
+log(breview_count)+bstars+log(ureview_count)+average_stars+fans+gender,data=data_training)
fit<-lm(stars~polarity+subjectivity+word+votes_useful+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata)
data1<-as.data.frame(fread("E:/8sem/YELP/MLR/src/training1.csv",header=TRUE))    #????训锟斤拷??????
attach(data1)
mydata<-data.frame(polarity,subjectivity,log_letter=log(data1$letter),word,votes_cool,votes_funny,votes_useful,log_breview_count=log(data1$breview_count),bstars,fans,log_ureview_count=log(data1$ureview_count),average_stars,gender,stars)
View(mydata)
detach(data1)
fit<-lm(stars~polarity+subjectivity+log_letter+word+votes_cool+votes_funny+votes_useful      #取?????????斜?锟斤拷
+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata)
summary.fit<-summary(fit)
write.csv(summary.fit$coefficients,"summary_fit1.csv",row.names=F)
fit<-lm(stars~polarity+subjectivity+word+votes_useful
+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata)
summary.fit<-summary(fit)
getwd()
library(MASS)
fit<-lm(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word+breview_count
+bstars+fans+ureview_count+average_stars,data=data_training)
library(leaps)
attach(data_training)
leaps<-regsubsets(stars~votes_cool+votes_funny+votes_useful+polarity+subjectivity+letter+word
+breview_count+bstars+fans+ureview_count+average_stars,data=data_training,nbest=2)
leaps<-regsubsets(stars~polarity+subjectivity+log(letter)+word+votes_cool+votes_funny+votes_useful
+log(breview_count)+bstars+log(ureview_count)+average_stars+fans+gender,data=data_training,nbest=2)
leaps<-regsubsets(stars~polarity+subjectivity+letter+votes_cool
+breview_count+bstars+fans+ureview_count+average_stars+gender,data=data_training,nbest=2)
leaps<-regsubsets(stars~polarity+subjectivity+log(letter)+votes_cool
+log(breview_count)+bstars+log(ureview_count)+average_stars+fans+gender,data=data_training,nbest=2)
attach(mydata)
leaps<-regsubsets(stars~polarity+subjectivity+word+votes_useful+log_breview_count+bstars+log_ureview_count+average_stars+fans+gender,data=mydata,nbest=2)
summary(leaps)
plot(leaps,scale="r2")
summary.regsubsets(leaps)
summary(leaps)
leaps.summary<-summary(leaps)
library(car)
qqPlot(fit,labels=row.names(data),id.method="identify",simulate=TRUE,
main="Q-Q图",xlab="标准化预测值",ylab="残差值")
library("gcookbook")
install.packages("gcookbook")
library("gcookbook")
residplot<-function(fit,nbreaks=100){
z<-rstudent(fit)
hist(z,breaks=nbreaks,freq=FALSE,
xlab="标准化残差",ylab="密度",
main="误差分布")
rug(jitter(z),col="brown")
curve(dnorm(x,mean=mean(z),sd=sd(z)),
add=TRUE,col="blue",lty=2)
lines(density(z)$x,density(z)$y,
col="red",lwd=2,lty=2)
legend("topright",legend=c("正态分布曲线","内核密度曲线"),
lty=1:2,col=c("blue","red"),cex=.7)
}
residplot(fit)
library(proxy)
summary(pr_DB)
?pch
load("E:/8sem/thesis/src/中期答辩这一波茫茫的数据.RData")
View(B.inO)
View(temp.popular)
View(temp.popular.flavor)
rm(temp.popular,temp.popular.flavor,temp.random,temp.random.flavor,recommendation)
View(Flavour)
View(UR.Flavor.test)
View(UR.Flavor.test)
length(unique(UR.Flavor.test$user_id))
rm(usr.result,usr.recommender,U.sample.list)
rm(res,res.IBCF,sample.ith,Kstar,sigma)
rm(TopN)
x <- seq(from = -5, to = 5, by = 0.05)
df <- data.frame(
x = x,
fun_a = sin(x^2),
fun_b = 50 * sin(x)
)
View(df)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
df2 <- df %>%
gather(key = fun, value = y, -x)
library(tidyverse)
df2 <- df %>%
gather(key = fun, value = y, -x)
View(df2)
df3 <- df %>%
rename(`sin~(x^2)` = fun_a, `'50'~sin~(x)` = fun_b) %>%
gather(key = fun, value = y, -x)
View(df3)
View(df2)
View(df3)
ggplot(df3, aes(x = x, y = y, color = fun)) +
geom_path() +
facet_grid(fun ~ ., scales = "free_y",
labeller = label_parsed,
switch = "y") +
theme(strip.background = element_blank(),
axis.title.y = element_blank(),
strip.text = element_text(size = rel(1))) +
guides(color = FALSE)
dummy <- data.frame(
x = 0,
y = c(-1.5, 2),
fun = "sin~(x^2)"
)
ggplot(df3, aes(x = x, y = y, color = fun)) +
geom_path() +
geom_blank(data = dummy) +
facet_grid(fun ~ ., scales = "free_y",
labeller = label_parsed,
switch = "y") +
theme(strip.background = element_blank(),
axis.title.y = element_blank(),
strip.text = element_text(size = rel(1))) +
guides(color = FALSE)
path="E:/git/plot-yelp"
setwd("path")
library(ggplot2)
library(reshape2)
setwd(path)
value1<-read.table('src/imp1.txt',sep=',',header=FALSE)
value2<-read.table('src/imp2.txt',sep=',',header=FALSE)
Value1<-as.matrix(value1)
colnames(Value1)<-c('Celegans','UsAir1','Lesmis','NetScience','Geom')
rownames(Value1)<-c('CN','Salton','Jaccard','HPI','HDI','AA','RA','Sorensen','LHN1','PA','FM','LP','LRM','Degree','Closeness','Betweennes','Eigenvector','Edge betweenness','K-Core')
Value1<-as.matrix(value1)
colnames(Value1)<-c('Celegans','UsAir1','Lesmis','NetScience','Geom')
value1<-read.table('src/imp1.txt',sep='',header=FALSE)
value2<-read.table('src/imp2.txt',sep='',header=FALSE)
Value1<-as.matrix(value1)
colnames(Value1)<-c('Celegans','UsAir1','Lesmis','NetScience','Geom')
rownames(Value1)<-c('CN','Salton','Jaccard','HPI','HDI','AA','RA','Sorensen','LHN1','PA','FM','LP','LRM','Degree','Closeness','Betweennes','Eigenvector','Edge betweenness','K-Core')
colnames(Value1)
View(value1)
View(Value1)
value1<-read.table('src/imp1.txt',sep='',header=T)
value2<-read.table('src/imp2.txt',sep='',header=T)
Value1<-as.matrix(value1)
colnames(Value1)<-c('Celegans','UsAir1','Lesmis','NetScience','Geom')
View(value1)
colnames(Value1)<-c("Celegans",'UsAir1','Lesmis','NetScience','Geom',"CatCortex")
rownames(Value1)<-c('CN','Salton','Jaccard','HPI','HDI','AA','RA','Sorensen','LHN1','PA','FM','LP','LRM','Degree','Closeness','Betweennes','Eigenvector','Edge betweenness','K-Core')
Value2<-as.matrix(value2)
colnames(Value2)<-c('Celegans','UsAir1','Lesmis','NetScience','Geom',"CatCortex")
rownames(Value2)<-c('CN','Salton','Jaccard','HPI','HDI','AA','RA','Sorensen','LHN1','PA','FM','LP','LRM','Degree','Closeness','Betweennes','Eigenvector','Edge betweenness','K-Core')
for (i in 1:6){
Value1[,i]<-rank(Value1[,i])
}
melted_Value1<- melt(Value1)
head(melted_Value1)
View(melted_Value1)
g1<-ggplot(data=melted_Value1, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(legend.position='none')+
theme(axis.text.x=element_text(angle=45,hjust=1))
g1
melted_Value2<- melt(Value2)
head(melted_Value2)
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(legend.position='none')+
theme(axis.text.x=element_text(angle=45,hjust=1))
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(axis.text.x=element_text(angle=45,hjust=1))
legend <- get_legend(g.result[[1]])
legend <- get_legend(g2)
legend <- get_legend(g2)
g2<-g2+theme(legend.position = "none")
library(gridExtra)
library(grid)
library(Cairo)
cairo_ps(paste("plot/heatmap/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
output.name="heatmap"
cairo_ps(paste("plot/heatmap/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
output.name="heatmap"
g.width=16
g.height=9
cairo_ps(paste("plot/heatmap/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
grid.result<-grid.arrange(g.result[[1]], g.result[[2]], legend, ncol=2,nrow=2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
grid.result<-grid.arrange(g1, g2, legend, ncol=2,nrow=2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
dev.off()
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(
legend.position = "bottom",
axis.text.x=element_text(angle=45,hjust=1))
legend <- get_legend(g2)
g2<-g2+theme(legend.position = "none")
cairo_ps(paste("plot/heatmap/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
grid.result<-grid.arrange(g1, g2, legend, ncol=2,nrow=2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
dev.off()
View(melted_Value2)
summary(melted_Value1)
summary(melted_Value2)
View(value2)
View(value1)
path="E:/git/plot-yelp"
setwd(path)
output.name="heatmap"
g.width=16
g.height=9
value1<-read.table('src/imp1.txt',sep='',header=T)
value2<-read.table('src/imp2.txt',sep='',header=T)
f_linearnorm<-function(feature){
delta=max(feature)-min(feature)
temp<-(feature-min(feature))/delta
return(temp)
}
for(i in 1:6){
value1[,i]<-f_linearnorm(value1[,i])
value2[,i]<-f_linearnorm(value2[,i])
}
Value1<-as.matrix(value1)
colnames(Value1)<-c("Celegans",'UsAir1','Lesmis','NetScience','Geom',"CatCortex")
rownames(Value1)<-c('CN','Salton','Jaccard','HPI','HDI','AA','RA','Sorensen','LHN1','PA','FM','LP','LRM','Degree','Closeness','Betweennes','Eigenvector','Edge betweenness','K-Core')
Value2<-as.matrix(value2)
colnames(Value2)<-c('Celegans','UsAir1','Lesmis','NetScience','Geom',"CatCortex")
rownames(Value2)<-c('CN','Salton','Jaccard','HPI','HDI','AA','RA','Sorensen','LHN1','PA','FM','LP','LRM','Degree','Closeness','Betweennes','Eigenvector','Edge betweenness','K-Core')
melted_Value1<- melt(Value1)
head(melted_Value1)
melted_Value1<- melt(Value1)
g1<-ggplot(data=melted_Value1, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(legend.position='none')+
theme(axis.text.x=element_text(angle=45,hjust=1))
melted_Value2<- melt(Value2)
melted_Value2<- melt(Value2)
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(
legend.position = "bottom",
axis.text.x=element_text(angle=45,hjust=1))
legend <- get_legend(g2)
g2<-g2+theme(legend.position = "none")
cairo_ps(paste("plot/heatmap/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
grid.result<-grid.arrange(g1, g2, legend, ncol=2,nrow=2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
dev.off()
k=2
for (i in 1:6){
Value1[,i]<-rank(Value1[,i])
Value2[,i]<-rank(Value2[,i])
}
k=2
melted_Value1<- melt(Value1)
g1<-ggplot(data=melted_Value1, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme()+
theme(
legend.position='none',
axis.text.x=element_text(angle=45,hjust=1),
panel.border = element_rect(size = 2,fill=NA),
plot.title = element_text(size=k*15,hjust = k*0.5),
axis.title.x = element_text(size = k*15),
axis.title.y = element_text(size = k*15),
axis.text.x = element_text(size = k*10),
axis.text.y = element_text(size = k*10)
)
g1<-ggplot(data=melted_Value1, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme()+
theme(
legend.position='none',
axis.text.x=element_text(angle=45,hjust=1),
panel.border = element_rect(size = 2,fill=NA),
plot.title = element_text(size=k*15,hjust = k*0.5),
axis.text.x = element_text(size = k*10),
axis.text.y = element_text(size = k*10)
)
g1<-ggplot(data=melted_Value1, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme()+
theme(
legend.position='none',
axis.text.x=element_text(angle=45,hjust=1),
panel.border = element_rect(size = 2,fill=NA),
axis.text.x = element_text(size = k*10),
axis.text.y = element_text(size = k*10)
)
g1<-ggplot(data=melted_Value1, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme()+
theme(
legend.position='none',
axis.text.x=element_text(angle=45,hjust=1),
panel.border = element_rect(size = 2,fill=NA),
axis.text.y = element_text(size = k*10)
)
k=2
melted_Value1<- melt(Value1)
g1<-ggplot(data=melted_Value1, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme()+
theme(
legend.position='none',
axis.text.x=element_text(angle=45,hjust=1),
panel.border = element_rect(size = 2,fill=NA),
axis.text.y = element_text(size = k*10)
)
melted_Value2<- melt(Value2)
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(
legend.key.size=unit(.5,"inches"),
legend.position = "bottom",
axis.text.x=element_text(angle=45,hjust=1),
panel.border = element_rect(size = 2,fill=NA),
axis.text.y = element_text(size = k*10)
)
legend <- get_legend(g2)
g2<-g2+theme(legend.position = "none")
cairo_ps(paste("plot/heatmap/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
grid.result<-grid.arrange(g1, g2, legend, ncol=2,nrow=2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
dev.off()
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(
legend.text = element_text(size=k*10),
legend.key.size=unit(.5,"inches"),
legend.position = "bottom",
axis.text.x=element_text(angle=45,hjust=1,size=k*10),
panel.border = element_rect(size = 2,fill=NA),
axis.text.y = element_text(size = k*10)
)
g1<-ggplot(data=melted_Value1, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme()+
theme(
legend.text = element_text(size=k*10),
legend.position='none',
axis.text.x=element_text(angle=45,hjust=1,size=k*10),
panel.border = element_rect(size = 2,fill=NA),
axis.text.y = element_text(size = k*10)
)
melted_Value2<- melt(Value2)
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(
legend.text = element_text(size=k*10),
legend.key.size=unit(.5,"inches"),
legend.position = "bottom",
axis.text.x=element_text(angle=45,hjust=1,size=k*10),
panel.border = element_rect(size = 2,fill=NA),
axis.text.y = element_text(size = k*10)
)
legend <- get_legend(g2)
g2<-g2+theme(legend.position = "none")
cairo_ps(paste("plot/heatmap/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
grid.result<-grid.arrange(g1, g2, legend, ncol=2,nrow=2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.2))
dev.off()
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
scale_fill_gradient(low="#ccffcc", high='#009900')+
labs(x = "",y = "")+
scale_x_discrete(expand = c(0, 0))+
theme(
legend.title=element_blank(),
legend.text = element_text(size=k*10),
legend.key.size=unit(.5,"inches"),
legend.position = "bottom",
axis.text.x=element_text(angle=45,hjust=1,size=k*10),
panel.border = element_rect(size = 2,fill=NA),
axis.text.y = element_text(size = k*10)
)
legend <- get_legend(g2)
g2<-g2+theme(legend.position = "none")
cairo_ps(paste("plot/heatmap/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
grid.result<-grid.arrange(g1, g2, legend, ncol=2,nrow=2,
layout_matrix = rbind(c(1,2), c(3,3)),
widths = c(2.7, 2.7), heights = c(2.5, 0.4))
dev.off()
