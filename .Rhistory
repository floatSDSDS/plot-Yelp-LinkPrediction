runApp('GeoCUI')
summary(engine_list)
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
runApp('GeoCUI')
shiny::runApp('GeoCUI')
shiny::runApp('GeoCUI')
library(wordcloud2)
data<-data.frame(
word=c("数据挖掘","一大坨数据报告","机器学习","花式聚类","无监督学习","推荐系统","时空数据","局部模型","Yelp","LBS","LBSNs","深夜报社美食部"),
freq=c(5,2,3,4,3,5,3,3,2,2,2,2)
)
View(data)
wordcloud2(data)
wordcloud2(data,.4)
load("E:/8sem/thesis/src/2 GeoOnlyAZNV/170326二级地理聚类标签商家池评论池.RData")
View(B.Basic)
temp<-select(B.Basic,business_id,categories,label)
library(dplyr)
temp<-select(B.Basic,business_id,categories,label)
write.table(temp,"id_cate_label.txt",row.names = F,col.names = F)
load("E:/8sem/thesis/src/modelGeoC.RData")
NMF.model[[1]]
# GeoC
library(leaflet)
library(dplyr)
library(ggplot2)
library(fpc)
library(RColorBrewer)
library(showtext)
library(sp)
library(snowfall)
library(igraph)
library(scales)
library(data.table)
library(qlcMatrix)
library(recommenderlab)
library(NMF)
NMF.model<-list()
for(j in 1){
print(paste("pack",j))
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
len=c(length(unique(UBS$user_id)),  length(unique(UBS$business_id)))
RRM<-as(UBS,"realRatingMatrix")
RRM<-as(RRM,"dgCMatrix")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
ba<-basis(nmf)
co<-coef(nmf)
nmf.temp<-mapply(function(i){
mapply(function(j){
cat(i,"-",j,"\r")
return(sum(ba[i,]*co[,j]))
},1:len[2])
},1:len[1])
nmf.temp<-t(nmf.temp)
dimnames(nmf.temp)[[2]]<-unique(UBS$business_id)
NMF.model[[j]]<-mapply(function(i){
cat(i,"\r")
return(names(-sort(-nmf.temp[i,])[1:30]))
},1:len[1])
rm(ba,co,RRM,nmf)
}
for(j in 1){
print(paste("pack",j))
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
len=c(length(unique(UBS$user_id)),  length(unique(UBS$business_id)))
RRM<-as(UBS,"realRatingMatrix")
RRM<-as(RRM,"dgCMatrix")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
ba<-basis(nmf)
co<-coef(nmf)
nmf.temp<-mapply(function(i){
mapply(function(j){
cat(i,"-",j,"\r")
return(sum(ba[i,]*co[,j]))
},1:len[2])
},1:len[1])
nmf.temp<-t(nmf.temp)
dimnames(nmf.temp)[[2]]<-unique(UBS$business_id)
NMF.model[[j]]<-mapply(function(i){
cat(i,"\r")
return(names(-sort(-nmf.temp[i,])[1:30]))
},1:len[1])
# rm(ba,co,RRM,nmf)
}
nmf@residuals
nmf@fit
nmf@rng
nmf@\
nmf@residuals
nmf@rng
nmf@call\
nmf@call
nmf@misc
nmf@runtime
?nmf
nmf@method
nmf@fit
nmf@parameters
nmf@call
nmf@misc
names(nmf@residuals)
?while
()
as.numeric(nmf@residuals)
as.numeric(names(nmf@residuals))
for(j in 1:9){
print(paste("pack",j))
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
len=c(length(unique(UBS$user_id)),  length(unique(UBS$business_id)))
RRM<-as(UBS,"realRatingMatrix")
RRM<-as(RRM,"dgCMatrix")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
while(as.numeric(names(nmf@residuals))==2000){
print("nmf looping")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
}
ba<-basis(nmf)
co<-coef(nmf)
nmf.temp<-mapply(function(i){
mapply(function(j){
cat(i,"-",j,"\r")
return(sum(ba[i,]*co[,j]))
},1:len[2])
},1:len[1])
nmf.temp<-t(nmf.temp)
dimnames(nmf.temp)[[2]]<-unique(UBS$business_id)
NMF.model[[j]]<-mapply(function(i){
cat(i,"\r")
return(names(-sort(-nmf.temp[i,])[1:30]))
},1:len[1])
# rm(ba,co,RRM,nmf)
}
for(j in 1:9){
print(paste("pack",j))
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
len=c(length(unique(UBS$user_id)),  length(unique(UBS$business_id)))
RRM<-as(UBS,"realRatingMatrix")
RRM<-as(RRM,"dgCMatrix")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,60,20)),method="offset",.opt="vP6")
while(as.numeric(names(nmf@residuals))==2000){
print("nmf looping")
nmf<-nmf(as.matrix(RRM),floor(len[1]/ifelse(len[1]>500,40,20)),method="offset",.opt="vP6")
}
ba<-basis(nmf)
co<-coef(nmf)
nmf.temp<-mapply(function(i){
mapply(function(j){
cat(i,"-",j,"\r")
return(sum(ba[i,]*co[,j]))
},1:len[2])
},1:len[1])
nmf.temp<-t(nmf.temp)
dimnames(nmf.temp)[[2]]<-unique(UBS$business_id)
NMF.model[[j]]<-mapply(function(i){
cat(i,"\r")
return(names(-sort(-nmf.temp[i,])[1:30]))
},1:len[1])
# rm(ba,co,RRM,nmf)
}
save.image("E:/8sem/thesis/src/新GeoC.RData")
dim(NMF.mode[[1]])
dim(NMF.model[[1]])
for(ith in 1:9){
# recommendation3[[1]]<-rbind(recommendation3[[1]],random.model[[ith]])
# recommendation3[[2]]<-rbind(recommendation3[[2]],popular.model[[ith]])
# recommendation3[[3]]<-rbind(recommendation3[[3]],UBCF.model[[ith]])
# recommendation3[[4]]<-rbind(recommendation3[[4]],IBCF.model[[ith]])
NMF.model[[ith]]<-t(NMF.model[[ith]])
recommendation3[[5]]<-rbind(recommendation3[[5]],NMF.model[[ith]])
# print(dim(NMF.model[[ith]]))
}
for (ith in 1:30){
# recommendation3[[1]][,ith]<-as.character(recommendation3[[1]][,ith])
# recommendation3[[2]][,ith]<-as.character(recommendation3[[2]][,ith])
# recommendation3[[3]][,ith]<-as.character(recommendation3[[3]][,ith])
# recommendation3[[4]][,ith]<-as.character(recommendation3[[4]][,ith])
recommendation3[[5]][,ith]<-as.character(recommendation3[[5]][,ith])
# recommendation3[[3]][,ith]<-as.character(recommendation3[[3]][,ith])
}
N.=30
for(j in 1:6){
for(ith in 5){
print(paste(ith,"-",j))
eva.temp[[ith]]<-data.frame(precision=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="precision")),
recall=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="recall")),
fmeasure=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="fmeasure")),
HR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="HR")),
ARHR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="ARHR")))
evaluation[ith+(j-1)*5,1]<-mean(eva.temp[[ith]]$precision)
evaluation[ith+(j-1)*5,2]<-mean(eva.temp[[ith]]$recall)
evaluation[ith+(j-1)*5,3]<-mean(eva.temp[[ith]]$fmeasure)
evaluation[ith+(j-1)*5,4]<-sum(eva.temp[[ith]]$HR)/5654
evaluation[ith+(j-1)*5,5]<-mean(eva.temp[[ith]]$ARHR)
}
N.=N.-5
}
pack.usr.name<-vector()
for(j in 1:9){
UBS<-filter(UR.Rst.2.train.temporal,cluster==j)%>%
select(user_id,business_id,stars)
pack.usr.name=c(pack.usr.name,unique(UBS$user_id))
}
for(j in 1:6){
for(ith in 5){
print(paste(ith,"-",j))
eva.temp[[ith]]<-data.frame(precision=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="precision")),
recall=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="recall")),
fmeasure=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="fmeasure")),
HR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="HR")),
ARHR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="ARHR")))
evaluation[ith+(j-1)*5,1]<-mean(eva.temp[[ith]]$precision)
evaluation[ith+(j-1)*5,2]<-mean(eva.temp[[ith]]$recall)
evaluation[ith+(j-1)*5,3]<-mean(eva.temp[[ith]]$fmeasure)
evaluation[ith+(j-1)*5,4]<-sum(eva.temp[[ith]]$HR)/5654
evaluation[ith+(j-1)*5,5]<-mean(eva.temp[[ith]]$ARHR)
}
N.=N.-5
}
eva.temp<-list()
N.=30
eva.temp<-list()
evaluation<-matrix(0,30,5)
N.=30
for(j in 1:6){
for(ith in 5){
print(paste(ith,"-",j))
eva.temp[[ith]]<-data.frame(precision=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="precision")),
recall=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="recall")),
fmeasure=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="fmeasure")),
HR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="HR")),
ARHR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="ARHR")))
evaluation[ith+(j-1)*5,1]<-mean(eva.temp[[ith]]$precision)
evaluation[ith+(j-1)*5,2]<-mean(eva.temp[[ith]]$recall)
evaluation[ith+(j-1)*5,3]<-mean(eva.temp[[ith]]$fmeasure)
evaluation[ith+(j-1)*5,4]<-sum(eva.temp[[ith]]$HR)/5654
evaluation[ith+(j-1)*5,5]<-mean(eva.temp[[ith]]$ARHR)
}
N.=N.-5
}
View(evaluation)
recommendation3[[5]]<-data.frame()
for(ith in 1:9){
# recommendation3[[1]]<-rbind(recommendation3[[1]],random.model[[ith]])
# recommendation3[[2]]<-rbind(recommendation3[[2]],popular.model[[ith]])
# recommendation3[[3]]<-rbind(recommendation3[[3]],UBCF.model[[ith]])
# recommendation3[[4]]<-rbind(recommendation3[[4]],IBCF.model[[ith]])
# NMF.model[[ith]]<-t(NMF.model[[ith]])
recommendation3[[5]]<-rbind(recommendation3[[5]],NMF.model[[ith]])
# print(dim(NMF.model[[ith]]))
}
dim(recommendation3[[5]])
for (ith in 1:30){
# recommendation3[[1]][,ith]<-as.character(recommendation3[[1]][,ith])
# recommendation3[[2]][,ith]<-as.character(recommendation3[[2]][,ith])
# recommendation3[[3]][,ith]<-as.character(recommendation3[[3]][,ith])
# recommendation3[[4]][,ith]<-as.character(recommendation3[[4]][,ith])
recommendation3[[5]][,ith]<-as.character(recommendation3[[5]][,ith])
# recommendation3[[3]][,ith]<-as.character(recommendation3[[3]][,ith])
}
eva.temp<-list()
evaluation<-matrix(0,30,5)
N.=30
for(j in 1:6){
for(ith in 5){
print(paste(ith,"-",j))
eva.temp[[ith]]<-data.frame(precision=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="precision")),
recall=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="recall")),
fmeasure=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="fmeasure")),
HR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="HR")),
ARHR=mapply(f.evaluate,i=1:5654,MoreArgs=list(N=N.,model=recommendation3[[ith]],key="ARHR")))
evaluation[ith+(j-1)*5,1]<-mean(eva.temp[[ith]]$precision)
evaluation[ith+(j-1)*5,2]<-mean(eva.temp[[ith]]$recall)
evaluation[ith+(j-1)*5,3]<-mean(eva.temp[[ith]]$fmeasure)
evaluation[ith+(j-1)*5,4]<-sum(eva.temp[[ith]]$HR)/5654
evaluation[ith+(j-1)*5,5]<-mean(eva.temp[[ith]]$ARHR)
}
N.=N.-5
}
View(evaluation)
source('E:/git/plot-yelp/1 plot_evaluate.R')
install.packages("cario")
install.packages("Cairo")
source('E:/git/plot-yelp/1 plot_evaluate.R')
library(data.table)
library(ggplot2)
library(dplyr)
library(gridExtra)
library(grid)
library(Cairo)
path="E:/git/plot-yelp"
output.name<-"plot-yelp"
# set output file size and font zooming level
g.width=12
g.height=5
plot.title=""
k=1.5
path="E:/git/plot-yelp"
output.name<-"plot-yelp"
# set output file size and font zooming level
g.width=12
g.height=5
plot.title=""
k=1.5
setwd(path)
source("1 fun.R")
data<-as.data.frame(fread("src/yelp.csv",header=T))
names(data)<-c("Proportion","Method","PCC","RMSE")
data$Method<-gsub("xia","Zhu et al.",data$Method)
data$Method<-gsub("our","Ours",data$Method)
#data<-melt(data,id.vars=c("Proportion","Method"))
point.shapes=15:20
line.type=c("solid","dashed","dotted","solid","solid","dashed")
colors=c("#009925","#EEB211","#3369E8","#D366EE","#EE8166","navy")
names(point.shapes)<-unique(data$Method)
names(line.type)<-unique(data$Method)
names(colors)<-unique(raw$Methods)
source('E:/git/plot-yelp/1 plot_evaluate.R')
rbind(c(1), c(2),c(3))
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
View(data)
data<-as.data.frame(fread("src/yelp.csv",header=T))
View(data)
names(data)<-c("Proportion","Method","PCC","RMSE")
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
?pch
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/1 plot_evaluate.R')
source('E:/git/plot-yelp/4 heatmap.R')
library(ggplot2)
library(reshape2)
library(gridExtra)
library(grid)
library(RColorBrewer)
library(Cairo)
library(showtext)
showtext.auto()
showtext.opts(dpi = 120)
font.add("Times New Roman", "times.ttf")
f_linearnorm2<-function(feature){
delta=max(feature)-min(feature)
temp<-(feature-min(feature))/delta
return(temp)
}
path="E:/git/plot-yelp"
output.name<-"test_font"
plot.title=""
g.width=16
g.height=6
k=2
setwd(path)
source("1 fun.R")
value1<-read.table('src/imp1.txt',sep='',header=T)
value2<-read.table('src/imp2.txt',sep='',header=T)
Value1<-as.matrix(value1)
colnames(Value1)<-c("Celegans",'USAir1','Lesmis','NetScience','Geom',"CatCortex")
rownames(Value1)<-c('CN','Salton','Jaccard','HPI','HDI','AA','RA','Sorensen','LHN1','PA','FM','LP','LRM','Degree','Closeness','Betweennes','Eigenvector','Edge betweenness','K-Core')
Value2<-as.matrix(value2)
colnames(Value2)<-c('Celegans','USAir1','Lesmis','NetScience','Geom',"CatCortex")
rownames(Value2)<-c('CN','Salton','Jaccard','HPI','HDI','AA','RA','Sorensen','LHN1','PA','FM','LP','LRM','Degree','Closeness','Betweennes','Eigenvector','Edge betweenness','K-Core')
for (i in 1:6){
Value1[,i]<-f_linearnorm2(Value1[,i])
Value2[,i]<-f_linearnorm2(Value2[,i])
}
melted_Value1<- melt(Value1)
g1<-ggplot(data=melted_Value1, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
labs(title="", x = "",y = "(a)")+
scale_x_discrete(expand = c(0, 0))+
theme()+
theme(
legend.title=element_blank(),
legend.text = element_text(size=k*10),
legend.position="top",
# legend.position = "none",
plot.title = element_text(size=k*15,hjust = 0.5),
axis.text.x=element_text(angle=45,hjust=0.75,vjust=0.8,size=k*10),
axis.text.y = element_text(angle=45,hjust=0.9,size = k*10),
axis.title.x = element_text(size = k*15),
axis.title.y = element_text(size = k*15),
panel.border = element_rect(size = 2,fill=NA)
)+
scale_fill_gradientn(
#    low="#ccffcc", high='#009900',
colours=colorRampPalette(brewer.pal(4,"Greens"))(20),
limits =c(-0.1,1.1), breaks = seq(0,1,length.out = 6))+
guides(fill = guide_colorbar(barwidth=2,barheight  = 17))+
coord_flip()
melted_Value2<- melt(Value2)
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
labs(title="",x = "",y = "(b)")+
scale_x_discrete(expand = c(0, 0))+
theme(
legend.title=element_blank(),
legend.key = element_rect(colour = "black"),
# legend.position=c(.6,.6),
# legend.position='top',
legend.text = element_text(size=k*10),
plot.title = element_text(size=k*15,hjust = 0.5),
axis.text.x=element_text(angle=45,hjust=0.75,vjust=0.8,size=k*10),
# axis.text.y = element_blank(),
axis.text.y = element_text(angle=45,hjust=0.9,size = k*10),
panel.border = element_rect(size = 2,fill=NA),
axis.title.x = element_text(size = k*15),
axis.title.y = element_text(size = k*15)
)+
guides(fill = guide_colorbar(barwidth = 2,barheight = 17))+
scale_fill_gradientn(
colours=colorRampPalette(brewer.pal(4,"Greens"))(20),
limits = c(-0.1,1.1), breaks = seq(0,1,length.out = 6))+
coord_flip()
legend <- get_legend(g2)
legend
g2<-ggplot(data=melted_Value2, aes(x=Var2, y=Var1,fill=value))+
geom_tile()+
labs(title="",x = "",y = "(b)")+
scale_x_discrete(expand = c(0, 0))+
theme(
legend.title=element_blank(),
legend.key = element_rect(colour = "black"),
# legend.position=c(.6,.6),
legend.position='top',
legend.text = element_text(size=k*10),
plot.title = element_text(size=k*15,hjust = 0.5),
axis.text.x=element_text(angle=45,hjust=0.75,vjust=0.8,size=k*10),
# axis.text.y = element_blank(),
axis.text.y = element_text(angle=45,hjust=0.9,size = k*10),
panel.border = element_rect(size = 2,fill=NA),
axis.title.x = element_text(size = k*15),
axis.title.y = element_text(size = k*15)
)+
guides(fill = guide_colorbar(barwidth = 2,barheight = 17))+
scale_fill_gradientn(
colours=colorRampPalette(brewer.pal(4,"Greens"))(20),
limits = c(-0.1,1.1), breaks = seq(0,1,length.out = 6))+
coord_flip()
legend <- get_legend(g2)
cairo_ps(paste("plot/heatmap/",paste(output.name,Sys.Date(),sep="-"),".eps",sep=""),
family = "Times",width = g.width, height = g.height)
grid.result<-grid.arrange(g1,g2, legend, ncol=2,nrow=2,
layout_matrix = rbind(c(3,3),c(1,2)),
widths = c(2.7,2.7), heights = c(0.3,3.3))
dev.off()
g1
g2
source('E:/git/plot-yelp/4 heatmap.R')
?ggsave
ggsave("plot/heatmap/test.png",g2,"png")
rbind(c(3,3),c(1,2))
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
?theme
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
source('E:/git/plot-yelp/4 heatmap.R')
dev.off()
